[tool.ruff]
target-version = "py311"
line-length = 100
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # Pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "SIM", # flake8-simplify
    "S",   # flake8-bandit (security)
    "T20", # flake8-print
    "PT",  # flake8-pytest-style
    "RET", # flake8-return
    "ERA", # eradicate (remove commented code)
    "PL",  # Pylint
    "TRY", # tryceratops
]
ignore = [
    "E501",    # line too long (handled by black)
    "S101",    # assert used (OK in tests)
    "PLR0913", # too many arguments
    "PLR0915", # too many statements
    "TRY003",  # long exception message
    "B008",    # function calls in argument defaults
]

[tool.ruff.per-file-ignores]
"tests/*" = ["S101", "PLR2004", "PLR0913"]
"*/test_*" = ["S101", "PLR2004", "PLR0913"]

[tool.ruff.flake8-bandit]
check-typed-exception = true

[tool.black]
line-length = 100
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | migrations
)/
'''

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_optional = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
no_implicit_reexport = true
strict_equality = true

# Strict mode for DTOs and schemas
[[tool.mypy.overrides]]
module = ["*schemas*", "*models*", "*dto*"]
strict = true
disallow_any_generics = true
disallow_any_unimported = true
disallow_any_expr = true

# More lenient for legacy code
[[tool.mypy.overrides]]
module = ["legacy.*"]
ignore_errors = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--disable-warnings",
    "--tb=short",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "smoke: marks tests as smoke tests",
    "security: marks tests as security tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["."]
omit = [
    "*/tests/*",
    "*/venv/*",
    "*/.venv/*",
    "*/migrations/*",
    "setup.py",
    "*/settings.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.bandit]
exclude_dirs = ["tests", "venv", ".venv"]
skips = ["B101", "B601"]  # Skip assert_used and shell usage in specific contexts

[tool.bandit.assert_used]
skips = ["*/test_*.py", "*/*_test.py"]