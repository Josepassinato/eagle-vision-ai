name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: ${{ github.repository }}

jobs:
  code-quality:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [fusion, edubehavior, safetyvision, antitheft, notifier, enricher]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        cd ${{ matrix.service }}
        pip install -r requirements.txt
        pip install ruff black mypy pytest pytest-cov
    
    - name: Run ruff (linting)
      run: |
        cd ${{ matrix.service }}
        ruff check . --output-format=github
    
    - name: Run black (formatting check)
      run: |
        cd ${{ matrix.service }}
        black --check --diff .
    
    - name: Run mypy (type checking)
      run: |
        cd ${{ matrix.service }}
        mypy --strict . || true  # Allow mypy to pass with warnings initially
    
    - name: Run smoke tests
      run: |
        cd ${{ matrix.service }}
        pytest -q tests/ --tb=short || true  # Smoke tests, allow failures initially

  security-scan:
    runs-on: ubuntu-latest
    needs: code-quality
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run secret detection
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified
    
    - name: Run semgrep security scan
      uses: returntocorp/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/secrets
          p/python
    
    - name: Check for hardcoded secrets
      run: |
        if grep -r "sk_live\|pk_live\|AKIA\|-----BEGIN" --include="*.py" --include="*.js" --include="*.ts" .; then
          echo "‚ùå Hardcoded secrets found!"
          exit 1
        fi
        echo "‚úÖ No hardcoded secrets detected"

  build-and-scan:
    runs-on: ubuntu-latest
    needs: [code-quality, security-scan]
    strategy:
      matrix:
        service: [fusion, edubehavior, safetyvision, antitheft, notifier, enricher]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      run: |
        docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/${{ matrix.service }}:${{ github.sha }} \
          -f ${{ matrix.service }}/Dockerfile .
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/${{ matrix.service }}:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-${{ matrix.service }}.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-${{ matrix.service }}.sarif'
        category: 'trivy-${{ matrix.service }}'
    
    - name: Check for critical vulnerabilities
      run: |
        # Fail build if critical vulnerabilities found
        docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
          aquasec/trivy image --exit-code 1 --severity CRITICAL \
          ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/${{ matrix.service }}:${{ github.sha }}

  integration-tests:
    runs-on: ubuntu-latest
    needs: build-and-scan
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Run integration tests
      env:
        DATABASE_URL: postgresql://postgres:testpass@localhost:5432/testdb
        REDIS_URL: redis://localhost:6379
      run: |
        pip install pytest pytest-asyncio httpx
        # Run basic integration tests
        python -m pytest tests/integration/ -v --tb=short || true

  deploy-staging:
    if: github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    needs: [integration-tests]
    environment: staging
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Log in to registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Deploy to staging
      run: |
        echo "üöÄ Deploying to staging environment..."
        # Add your staging deployment logic here
        # Could be Docker Compose, Kubernetes, etc.
    
    - name: Run smoke tests against staging
      run: |
        echo "üîç Running smoke tests against staging..."
        # Add smoke tests against deployed staging environment

  deploy-production:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: [integration-tests]
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Log in to registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Push images to registry
      strategy:
        matrix:
          service: [fusion, edubehavior, safetyvision, antitheft, notifier, enricher]
      run: |
        docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/${{ matrix.service }}:${{ github.sha }} \
          ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/${{ matrix.service }}:latest
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/${{ matrix.service }}:${{ github.sha }}
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/${{ matrix.service }}:latest
    
    - name: Deploy to production
      run: |
        echo "üöÄ Deploying to production environment..."
        # Add your production deployment logic here
    
    - name: Post-deployment verification
      run: |
        echo "‚úÖ Running post-deployment verification..."
        # Add verification tests for production deployment

  notify:
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
    - name: Notify deployment status
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        text: |
          üîÑ Deployment Status: ${{ job.status }}
          üì¶ Commit: ${{ github.sha }}
          üåø Branch: ${{ github.ref }}
          üë§ Author: ${{ github.actor }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}