# Log
logLevel: info
logDestinations: [stdout]

# Protocolos habilitados
rtsp: yes
rtspAddress: :8554
rtmp: yes
rtmpAddress: :1935
hls: yes
hlsAddress: :8888
hlsSegmentDuration: 2s
hlsSegmentCount: 10
hlsVariant: lowLatency
hlsAllowOrigin: "*"
webrtc: yes
webrtcAddress: :8889
webrtcAllowOrigin: "*"
srt: yes
srtAddress: :8890

# API para controle
api: yes
apiAddress: :9997
apiAllowOrigin: "*"

# Métricas
metrics: yes
metricsAddress: :9998

# PlayBack/DVR
playback: yes
playbackAddress: :9999

# Configurações de rede
readTimeout: 10s
writeTimeout: 10s
readBufferCount: 512

# Diretório de gravações on-demand (se ativar record)
recordPath: /recordings

# Paths (rotas) — escolha UMA das opções abaixo por câmera

paths:
  # (A) PULL de uma câmera IP: a nuvem puxa via RTSP quando houver leitor
  entrada:
    source: rtsp://USUARIO:Senha@IP_DA_CAMERA:554/stream1
    sourceOnDemand: yes
    sourceProtocol: tcp
    readUser: leitor
    readPass: leitor123

  # (B) PUSH (exemplo RTMP). Publique com credenciais e leia via RTSP/HLS/WebRTC
  simulador:
    publishUser: pub
    publishPass: pub123
    readUser: leitor
    readPass: leitor123
    # Habilita gravação contínua em segmentos curtos
    record: yes
    # Os arquivos serão gravados em /recordings (montado via docker-compose)
    # A janela HLS acima (hlsSegmentDuration/Count) mantém ~20s no playlist para DVR
